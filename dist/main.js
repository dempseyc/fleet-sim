!function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(i,r,function(t){return e[t]}.bind(null,r));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=1)}([function(e,t,s){},function(e,t,s){"use strict";s.r(t);s(0);function i(e,t){return Math.floor(Math.random()*t-e)+e}function r(e){return Math.pow(e,2)}class h{constructor(e){this.idx=e,this.x=i(0,1e3),this.y=i(0,1e3),this.held_by="none",this.init()}draw(){this.DOMh.style.left=`${this.x/10}%`,this.DOMh.style.top=`${this.y/10}%`}remove(){this.DOMh.remove()}init(){this.DOMh=document.createElement("div"),this.DOMh.setAttribute("id",`g-${this.idx}`),this.DOMh.classList.add(...["gold"]),this.draw()}}class n{constructor(e,t,s,i){this.color=e,this.idx=i,this.shield=s[0],this.weapon=s[1],this.engine=s[2],this.fraction=.05,this.speed=this.engine*this.fraction,this.status=0,this.shieldStatus=s[0],this.gold=0,this.init()}init(){let e=["ship",`s-${this.idx}`,`s-${this.color}`,`s-${this.style}`];this.DOMh=document.createElement("div"),this.DOMh.classList.add(...e),this.getInitialPosition(),this.draw()}move(e){this.x+=this.vx*this.fraction*this.speed*e,this.y+=this.vy*this.fraction*this.speed*e}draw(){this.DOMh.style.left=`${this.x/10}%`,this.DOMh.style.top=`${this.y/10}%`}getInitialPosition(){this.x=i(1,1e3),this.y=i(1,1e3)}resetVector(){let e=this.gt.x-this.x,t=this.gt.y-this.y,s=Math.abs(e),i=Math.abs(t),h=r(e)+r(t);this.vx=e*s/h,this.vy=t*i/h}acquireGold(){this.gold+=1}setGoldTarget(e){let t=2016400;e.forEach((e,s)=>{let i=e.x-this.x,h=e.y-this.y,n=r(i)+r(h);void 0===this.gt&&(this.gt=e,t=n),n<=t&&(this.gt=e,t=n)}),this.resetVector()}setEnemyTarget(e){let t=2e6,s=function(e){return Math.pow(e,2)};e.forEach(e=>{e.s_array.forEach(e=>{let i=this.x-e.x,r=(this.y,e.y,s(i)+s(i));void 0===this.et&&(this.et=e,t=r,this.et_d=t),r<=t&&(this.et=e,t=r,this.et_d=t)})})}attackEnemy(){let e=this.et_d/r(200);i(0,Math.floor(Math.random()*(1-e)*9))>=2&&this.et.getAttacked(this.weapon),this.incrementStunnedTimer()}getAttacked(e){console.log("damage",this.shieldStatus),this.shieldStatus-=e,this.shieldStatus<=0&&(this.speed=(this.engine+this.shieldStatus)*this.fraction),this.startStunnedTimer()}startStunnedTimer(){console.log("got stunned",this.speed),this.status=3}incrementStunnedTimer(){this.status>0&&this.status--,0===this.status&&(this.speed=this.engine*this.fraction,this.shieldStatus=this.shield)}}class o{constructor(e){this.banner=e,this.baselines={sh:20,wp:10,eg:15},this.multipliers={sh:2,wp:2,eg:2},this.features={shields:[{power:this.baselines.sh+0*this.multipliers.sh,owned_by:["gunner"]},{power:this.baselines.sh+1*this.multipliers.sh,owned_by:["swift","speeder"]},{power:this.baselines.sh+2*this.multipliers.sh,owned_by:["average"]},{power:this.baselines.sh+3*this.multipliers.sh,owned_by:[""]},{power:this.baselines.sh+4*this.multipliers.sh,owned_by:["transport"]}],weapons:[{power:this.baselines.wp+0*this.multipliers.wp,owned_by:["transport"]},{power:this.baselines.wp+1*this.multipliers.wp,owned_by:["speeder"]},{power:this.baselines.wp+2*this.multipliers.wp,owned_by:["average","swift"]},{power:this.baselines.wp+3*this.multipliers.wp,owned_by:[]},{power:this.baselines.wp+4*this.multipliers.wp,owned_by:["gunner"]}],engines:[{power:this.baselines.eg+0*this.multipliers.eg,owned_by:[]},{power:this.baselines.eg+1*this.multipliers.eg,owned_by:[]},{power:this.baselines.eg+2*this.multipliers.eg,owned_by:["average","transport","gunner"]},{power:this.baselines.eg+3*this.multipliers.eg,owned_by:["swift"]},{power:this.baselines.eg+4*this.multipliers.eg,owned_by:["speeder"]}]},this.profiles={average:[this.features.shields[2].power,this.features.weapons[2].power,this.features.engines[2].power],swift:[this.features.shields[1].power,this.features.weapons[2].power,this.features.engines[3].power],transport:[this.features.shields[4].power,this.features.weapons[0].power,this.features.engines[2].power],gunner:[this.features.shields[0].power,this.features.weapons[4].power,this.features.engines[2].power],speeder:[this.features.shields[1].power,this.features.weapons[1].power,this.features.engines[4].power]}}buildShip(e,t,s){let i=this.profiles[t];return new n(e,t,i,s)}adjustMultipliers(){for(let e in this.multipliers)this.multipliers[e]+=1}getMultipliers(){for(let e in this.multipliers)console.log(this.multipliers[e])}}class a{constructor(e,t,s){this.banner=e,this.money=t,this.s_array=[],this.strategy=s,this.sf=new o(this.banner),this.init()}getNumShips(){return this.s_array.length}purchaseShips(){let e=this.strategy.average,t=0;for(;e>t+1;)this.s_array.push(this.sf.buildShip(this.banner,"average",t)),t++}init(){console.log("new Fleet",this.banner),this.purchaseShips()}}let l=new class{constructor(){this.num_gold=900,this.money_per_fleet=15e4,this.DOMh=document.getElementById("board"),this.fleets=[new a("red",this.money_per_fleet,{average:20,swift:0,transport:0,gunner:0,speeder:0}),new a("green",this.money_per_fleet,{average:20,swift:0,transport:0,gunner:0,speeder:0}),new a("blue",this.money_per_fleet,{average:20,swift:0,transport:0,gunner:0,speeder:0})],this.gold_pieces=[],this.init()}placeGold(){for(let e=0;e<this.num_gold;e++){let t=new h(e);this.gold_pieces.push(t)}}gold_on_field(){return this.gold_pieces.filter(e=>"none"===e.held_by)}init(){this.placeGold(),this.setTargets(this.fleets),this.fleets.forEach(e=>{e.s_array.forEach(e=>{this.DOMh.appendChild(e.DOMh)})}),this.gold_pieces.forEach(e=>{this.DOMh.appendChild(e.DOMh)})}setTargets(){this.fleets.forEach((e,t)=>{let s=this.fleets.filter((e,s)=>s!==t);e.s_array.forEach(e=>{e.setGoldTarget(this.gold_on_field()),e.setEnemyTarget(s)})})}makeAttacks(){this.fleets.forEach((e,t)=>{e.s_array.forEach(e=>{e.attackEnemy()})})}doHitDetect(){this.fleets.forEach(e=>{e.s_array.forEach(e=>{this.gold_pieces.forEach(t=>{r(t.x-e.x)+r(t.y-e.y)<25&&"none"===t.held_by&&this.removeGold(t,e)})})})}removeGold(e,t){e.held_by=t.profile,t.acquireGold(),this.setTargets(this.fleets),e.remove()}draw(){this.doHitDetect(),this.fleets.forEach(e=>{e.s_array.forEach(e=>{e.draw()})})}update(e){this.fleets.forEach(t=>{t.s_array.forEach(t=>{t.move(e)})})}oneSecUpdate(){this.makeAttacks()}twoSecUpdate(){this.setTargets()}},p=0,d=0,u=0,f=100,c=0,w=10,g=!1,y=!1;let m=0,b=0;function _(e){if(e<u+1e3/f)return void(p=requestAnimationFrame(_));c+=e-u,u=e;let t=0;for(;c>=w;)if(++b>74&&(l.oneSecUpdate(),b=0),++m>199&&(l.twoSecUpdate(),m=0),l.update(c),c-=w,++t>=124){c=0,console.log("panic");break}l.draw(),l.gold_on_field().length>0?p=requestAnimationFrame(_):(g=!1,y=!1,cancelAnimationFrame(p),l.fleets.forEach((e,t)=>{let s=e.s_array.reduce((e,t,s)=>e+t.gold,0);console.log(t+1,e.banner,s)}))}y||(y=!0,p=requestAnimationFrame(function(e){l.draw(),g=!0,u=e,d=e,p=requestAnimationFrame(_)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,