!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=5)}([function(t,e,s){var i=s(1);"string"==typeof i&&(i=[[t.i,i,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(3)(i,n);i.locals&&(t.exports=i.locals)},function(t,e,s){(t.exports=s(2)(!1)).push([t.i,".s-white {\n  background: #eeeeee;\n  color: #222222; }\n\n.s-red {\n  background: #cc1111;\n  color: #ff88ff; }\n\n.s-blue {\n  background: #1166bb;\n  color: #22cccc; }\n\n.s-green {\n  background: #008800;\n  color: #cccc44; }\n\n.s-purple {\n  background: #8855ee;\n  color: #008800; }\n\n#board {\n  position: relative;\n  height: 100vh;\n  width: 100vh;\n  background: #222222;\n  overflow: hidden; }\n\n#data-display {\n  position: absolute;\n  right: 5%;\n  top: 5%; }\n\n.ship {\n  position: absolute;\n  width: 12px;\n  height: 12px;\n  font-size: 18px;\n  line-height: 14px;\n  font-family: 'Roboto Mono', monospace;\n  text-align: center;\n  clip-path: polygon(0% 100%, 50% 0%, 100% 100%);\n  border-radius: 100%; }\n\n.gold {\n  position: absolute;\n  height: 2px;\n  width: 2px;\n  left: 0;\n  top: 0;\n  background-color: gold;\n  box-shadow: 0 0 2px 1px gold; }\n\n.s-status0 {\n  outline: none; }\n\n.s-status1 {\n  outline: #aaccff;\n  animation: fade 1000ms infinite;\n  -webkit-animation: fade 1000ms infinite; }\n\n.s-status2 {\n  outline: #aaccff;\n  animation: fade 750ms infinite;\n  -webkit-animation: fade 750ms infinite; }\n\n.s-status3 {\n  outline: #aaccff;\n  animation: fade 500ms infinite;\n  -webkit-animation: fade 500ms infinite; }\n\n@keyframes fade {\n  from {\n    opacity: 1.0; }\n  50% {\n    opacity: 0.5; }\n  to {\n    opacity: 1.0; } }\n\n@-webkit-keyframes fade {\n  from {\n    opacity: 1.0; }\n  50% {\n    opacity: 0.5; }\n  to {\n    opacity: 1.0; } }\n",""])},function(t,e,s){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var s=function(t,e){var s=t[1]||"",i=t[3];if(!i)return s;if(e&&"function"==typeof btoa){var n=(o=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),r=i.sources.map(function(t){return"/*# sourceURL="+i.sourceRoot+t+" */"});return[s].concat(r).concat([n]).join("\n")}var o;return[s].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+s+"}":s}).join("")},e.i=function(t,s){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},n=0;n<this.length;n++){var r=this[n][0];null!=r&&(i[r]=!0)}for(n=0;n<t.length;n++){var o=t[n];null!=o[0]&&i[o[0]]||(s&&!o[2]?o[2]=s:s&&(o[2]="("+o[2]+") and ("+s+")"),e.push(o))}},e}},function(t,e,s){var i,n,r={},o=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===n&&(n=i.apply(this,arguments)),n}),a=function(t){var e={};return function(t,s){if("function"==typeof t)return t();if(void 0===e[t]){var i=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,s);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}}(),h=null,l=0,u=[],f=s(4);function c(t,e){for(var s=0;s<t.length;s++){var i=t[s],n=r[i.id];if(n){n.refs++;for(var o=0;o<n.parts.length;o++)n.parts[o](i.parts[o]);for(;o<i.parts.length;o++)n.parts.push(m(i.parts[o],e))}else{var a=[];for(o=0;o<i.parts.length;o++)a.push(m(i.parts[o],e));r[i.id]={id:i.id,refs:1,parts:a}}}}function d(t,e){for(var s=[],i={},n=0;n<t.length;n++){var r=t[n],o=e.base?r[0]+e.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};i[o]?i[o].parts.push(a):s.push(i[o]={id:o,parts:[a]})}return s}function p(t,e){var s=a(t.insertInto);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=u[u.length-1];if("top"===t.insertAt)i?i.nextSibling?s.insertBefore(e,i.nextSibling):s.appendChild(e):s.insertBefore(e,s.firstChild),u.push(e);else if("bottom"===t.insertAt)s.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var n=a(t.insertAt.before,s);s.insertBefore(e,n)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function w(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var i=function(){0;return s.nc}();i&&(t.attrs.nonce=i)}return b(e,t.attrs),p(t,e),e}function b(t,e){Object.keys(e).forEach(function(s){t.setAttribute(s,e[s])})}function m(t,e){var s,i,n,r;if(e.transform&&t.css){if(!(r="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=r}if(e.singleton){var o=l++;s=h||(h=w(e)),i=_.bind(null,s,o,!1),n=_.bind(null,s,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(s=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),p(t,e),e}(e),i=function(t,e,s){var i=s.css,n=s.sourceMap,r=void 0===e.convertToAbsoluteUrls&&n;(e.convertToAbsoluteUrls||r)&&(i=f(i));n&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var o=new Blob([i],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,s,e),n=function(){g(s),s.href&&URL.revokeObjectURL(s.href)}):(s=w(e),i=function(t,e){var s=e.css,i=e.media;i&&t.setAttribute("media",i);if(t.styleSheet)t.styleSheet.cssText=s;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(s))}}.bind(null,s),n=function(){g(s)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else n()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var s=d(t,e);return c(s,e),function(t){for(var i=[],n=0;n<s.length;n++){var o=s[n];(a=r[o.id]).refs--,i.push(a)}t&&c(d(t,e),e);for(n=0;n<i.length;n++){var a;if(0===(a=i[n]).refs){for(var h=0;h<a.parts.length;h++)a.parts[h]();delete r[a.id]}}}};var v,y=(v=[],function(t,e){return v[t]=e,v.filter(Boolean).join("\n")});function _(t,e,s,i){var n=s?"":i.css;if(t.styleSheet)t.styleSheet.cssText=y(e,n);else{var r=document.createTextNode(n),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(r,o[e]):t.appendChild(r)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var s=e.protocol+"//"+e.host,i=s+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var n,r=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(n=0===r.indexOf("//")?r:0===r.indexOf("/")?s+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},function(t,e,s){"use strict";s.r(e);s(0);function i(t,e){return Math.floor(Math.random()*e-t)+t}function n(t){return Math.pow(t,2)}function r(t){let e=t.length;return t.reduce((t,e)=>e+t)/e}class o{constructor(t){this.idx=t,this.x=i(0,1e3),this.y=i(0,1e3),this.held_by="none",this.init()}draw(){this.DOMh.style.left=`${this.x/10}%`,this.DOMh.style.top=`${this.y/10}%`}remove(){this.DOMh.remove()}init(){this.DOMh=document.createElement("div"),this.DOMh.setAttribute("id",`g-${this.idx}`),this.DOMh.classList.add(...["gold"]),this.draw()}}class a{constructor(t,e,s,i,n){this.banner=t,this.style=e,this.insignia=s,this.idx=n,this.shield=i[0],this.weapon=i[1],this.engine=i[2],this.fraction=.05,this.speed=this.engine*this.fraction,this.status=0,this.shieldStatus=i[0],this.gold=0,this.init()}init(){let t=["ship",`s-${this.idx}`,`s-${this.banner}`,`s-${this.style}`,`s-${this.status}`];this.DOMh=document.createElement("div"),this.DOMh.classList.add(...t),this.DOMh.textContent=this.insignia,this.getInitialPosition(),this.draw()}move(t){this.x+=this.vx*this.fraction*this.speed*t,this.y+=this.vy*this.fraction*this.speed*t}draw(){this.DOMh.style.left=`${this.x/10}%`,this.DOMh.style.top=`${this.y/10}%`}getInitialPosition(){this.x=i(1,1e3),this.y=i(1,1e3)}resetVector(){let t=this.gt.x-this.x,e=this.gt.y-this.y,s=Math.abs(t),i=Math.abs(e),r=n(t)+n(e);this.vx=t*s/r,this.vy=e*i/r}acquireGold(){this.gold+=1}setGoldTarget(t){let e=2016400;t.forEach((t,s)=>{let i=t.x-this.x,r=t.y-this.y,o=n(i)+n(r);void 0===this.gt&&(this.gt=t,e=o),o<=e&&(this.gt=t,e=o)}),this.resetVector()}setEnemyTarget(t){let e=2e6,s=function(t){return Math.pow(t,2)};t.forEach(t=>{t.s_array.forEach(t=>{let i=this.x-t.x,n=(this.y,t.y,s(i)+s(i));void 0===this.et&&(this.et=t,e=n,this.et_d=e),n<=e&&(this.et=t,e=n,this.et_d=e)})})}attackEnemy(){if(0===this.status){let t=200,e=this.et_d/n(t);i(0,Math.floor(Math.random()*(1-e)*9))>=2&&this.et.getAttacked(this.weapon)}else this.decrementStunned()}getAttacked(t){this.shieldStatus-=t,this.shieldStatus<=0&&(this.speed=(this.engine+this.shieldStatus)*this.fraction),this.startStunnedTimer()}startStunnedTimer(){this.DOMh.classList.remove("s-status0"),this.DOMh.classList.add(`s-status${this.status}`),this.status=3}decrementStunned(){this.status>0&&(this.DOMh.classList.remove(`s-status${this.status}`),this.status--,this.DOMh.classList.add(`s-status${this.status}`)),0===this.status&&(this.speed=this.engine*this.fraction,this.shieldStatus=this.shield)}}class h{constructor(t){this.banner=t,this.styles=["standard","swift","transport","gunner","speeder"],this.insignias={standard:"o",swift:"V",transport:"-",gunner:"*",speeder:"w"},this.baselines={sh:20,wp:20,eg:20},this.multipliers={sh:2,wp:2,eg:2},this.features={shields:[{power:this.baselines.sh+0*this.multipliers.sh,owned_by:["gunner"]},{power:this.baselines.sh+1*this.multipliers.sh,owned_by:["swift","speeder"]},{power:this.baselines.sh+2*this.multipliers.sh,owned_by:["standard"]},{power:this.baselines.sh+3*this.multipliers.sh,owned_by:[""]},{power:this.baselines.sh+4*this.multipliers.sh,owned_by:["transport"]}],weapons:[{power:this.baselines.wp+0*this.multipliers.wp,owned_by:["transport"]},{power:this.baselines.wp+1*this.multipliers.wp,owned_by:["speeder"]},{power:this.baselines.wp+2*this.multipliers.wp,owned_by:["standard","swift"]},{power:this.baselines.wp+3*this.multipliers.wp,owned_by:[]},{power:this.baselines.wp+4*this.multipliers.wp,owned_by:["gunner"]}],engines:[{power:this.baselines.eg+0*this.multipliers.eg,owned_by:[]},{power:this.baselines.eg+1*this.multipliers.eg,owned_by:[]},{power:this.baselines.eg+2*this.multipliers.eg,owned_by:["standard","transport","gunner"]},{power:this.baselines.eg+3*this.multipliers.eg,owned_by:["swift"]},{power:this.baselines.eg+4*this.multipliers.eg,owned_by:["speeder"]}]},this.profiles={standard:[this.features.shields[2].power,this.features.weapons[2].power,this.features.engines[2].power],swift:[this.features.shields[1].power,this.features.weapons[2].power,this.features.engines[3].power],transport:[this.features.shields[4].power,this.features.weapons[0].power,this.features.engines[2].power],gunner:[this.features.shields[0].power,this.features.weapons[4].power,this.features.engines[2].power],speeder:[this.features.shields[1].power,this.features.weapons[1].power,this.features.engines[4].power]}}buildShip(t,e,s){let i=this.profiles[e],n=this.insignias[e];return new a(t,e,n,i,s)}adjustMultipliers(){for(let t in this.multipliers)this.multipliers[t]+=1}getMultipliers(){for(let t in this.multipliers)console.log(this.multipliers[t])}}class l{constructor(t,e,s){this.banner=t,this.money=e,this.s_array=[],this.strategy=s,this.SF=new h(this.banner),this.init()}getNumShips(){return this.s_array.length}purchaseShips(){this.strategy.standard;let t=0;for(let e in this.strategy){let s=0,i=this.strategy[e];for(;i>s+1;)this.s_array.push(this.SF.buildShip(this.banner,e,t)),t++,s++}}init(){console.log("new Fleet",this.banner),this.purchaseShips()}}class u{constructor(){this.num_gold=900,this.money_per_fleet=15e4,this.DOMh=document.getElementById("board"),this.REDstrategy={standard:10,swift:0,transport:0,gunner:0,speeder:0},this.GREENstrategy={standard:10,swift:0,transport:0,gunner:0,speeder:0},this.BLUEstrategy={standard:10,swift:0,transport:0,gunner:0,speeder:0},this.fleets=[new l("red",this.money_per_fleet,this.REDstrategy),new l("green",this.money_per_fleet,this.GREENstrategy),new l("blue",this.money_per_fleet,this.BLUEstrategy)],this.gold_pieces=[],this.init()}placeGold(){for(let t=0;t<this.num_gold;t++){let e=new o(t);this.gold_pieces.push(e)}}gold_on_field(){return this.gold_pieces.filter(t=>"none"===t.held_by)}init(){this.placeGold(),this.setTargets(this.fleets),this.fleets.forEach(t=>{t.s_array.forEach(t=>{this.DOMh.appendChild(t.DOMh)})}),this.gold_pieces.forEach(t=>{this.DOMh.appendChild(t.DOMh)})}setTargets(){this.fleets.forEach((t,e)=>{let s=this.fleets.filter((t,s)=>s!==e);t.s_array.forEach(t=>{t.setGoldTarget(this.gold_on_field()),t.setEnemyTarget(s)})})}makeAttacks(){this.fleets.forEach((t,e)=>{t.s_array.forEach(t=>{t.attackEnemy()})})}doHitDetect(){this.fleets.forEach(t=>{t.s_array.forEach(t=>{this.gold_pieces.forEach(e=>{n(e.x-t.x)+n(e.y-t.y)<25&&"none"===e.held_by&&this.removeGold(e,t)})})})}removeGold(t,e){t.held_by=e.profile,e.acquireGold(),this.setTargets(this.fleets),t.remove()}draw(){this.doHitDetect(),this.fleets.forEach(t=>{t.s_array.forEach(t=>{t.draw()})})}update(t){this.fleets.forEach(e=>{e.s_array.forEach(e=>{e.move(t)})})}clear(){for(;this.DOMh.firstChild;)this.DOMh.removeChild(this.DOMh.firstChild)}}let f=!0,c=!1,d=3,p=3,g=document.querySelector("#r-score"),w=document.querySelector("#b-score"),b=document.querySelector("#g-score"),m=document.querySelector("#stan-dev"),v=[],y=[{banner:"red",gold:0},{banner:"green",gold:0},{banner:"blue",gold:0}];function _(){g.textContent=`${y[0].gold/d} avg`,b.textContent=`${y[1].gold/d} avg`,w.textContent=`${y[2].gold/d} avg`,m.textContent=function(t){let e=r(t);console.log(e);let s=t.map(t=>n(t-e));return Math.sqrt(r(s))}(v),f=!0}!function t(){f=!1;let e=new u,s=0,i=0,n=0,r=100,o=0,a=10,h=!1,l=!1;let d=0,m=0;function x(i){if(i<n+1e3/r)return void(s=requestAnimationFrame(x));o+=i-n,n=i;let u=0;for(;o>=a;)if(++m>25&&(e.setTargets(),m=0),++d>50&&(e.makeAttacks(),d=0),e.update(o),o-=a,++u>=124){o=0,console.log("panic");break}e.draw(),e.gold_on_field().length>0?s=requestAnimationFrame(x):(h=!1,l=!1,cancelAnimationFrame(s),e.fleets.forEach((t,e)=>{let s=t.s_array.reduce((t,e,s)=>t+e.gold,0);v.push(s),y[e].gold+=s,console.log(e+1,t.banner,s)}),e.clear(),g.textContent=y[0].gold,b.textContent=y[1].gold,w.textContent=y[2].gold,f=!0,--p>0?t():(c=!0,_(),console.log("complete")))}l||(l=!0,s=requestAnimationFrame(function(t){e.draw(),h=!0,n=t,i=t,s=requestAnimationFrame(x)}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,