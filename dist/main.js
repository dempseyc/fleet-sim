!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=5)}([function(t,e,i){var s=i(1);"string"==typeof s&&(s=[[t.i,s,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};i(3)(s,n);s.locals&&(t.exports=s.locals)},function(t,e,i){(t.exports=i(2)(!1)).push([t.i,".s-white {\n  background: #eeeeee;\n  color: #222222; }\n\n.s-red {\n  background: #cc1111;\n  color: #ff88ff; }\n\n.s-blue {\n  background: #1166bb;\n  color: #22cccc; }\n\n.s-green {\n  background: #008800;\n  color: #cccc44; }\n\n.s-purple {\n  background: #8855ee;\n  color: #008800; }\n\n#board {\n  position: relative;\n  height: 100vh;\n  width: 100vh;\n  background: #222222;\n  overflow: hidden; }\n\n#data-display {\n  position: absolute;\n  right: 5%;\n  top: 5%; }\n\n.ship {\n  position: absolute;\n  width: 12px;\n  height: 12px;\n  font-size: 18px;\n  line-height: 14px;\n  font-family: 'Roboto Mono', monospace;\n  text-align: center;\n  clip-path: polygon(0% 100%, 50% 0%, 100% 100%); }\n\n.gold {\n  position: absolute;\n  height: 2px;\n  width: 2px;\n  left: 0;\n  top: 0;\n  background-color: gold;\n  box-shadow: 0 0 5px 1px gold; }\n",""])},function(t,e,i){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var i=function(t,e){var i=t[1]||"",s=t[3];if(!s)return i;if(e&&"function"==typeof btoa){var n=(o=s,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),r=s.sources.map(function(t){return"/*# sourceURL="+s.sourceRoot+t+" */"});return[i].concat(r).concat([n]).join("\n")}var o;return[i].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i}).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var s={},n=0;n<this.length;n++){var r=this[n][0];null!=r&&(s[r]=!0)}for(n=0;n<t.length;n++){var o=t[n];null!=o[0]&&s[o[0]]||(i&&!o[2]?o[2]=i:i&&(o[2]="("+o[2]+") and ("+i+")"),e.push(o))}},e}},function(t,e,i){var s,n,r={},o=(s=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===n&&(n=s.apply(this,arguments)),n}),a=function(t){var e={};return function(t,i){if("function"==typeof t)return t();if(void 0===e[t]){var s=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,i);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(t){s=null}e[t]=s}return e[t]}}(),h=null,l=0,u=[],c=i(4);function f(t,e){for(var i=0;i<t.length;i++){var s=t[i],n=r[s.id];if(n){n.refs++;for(var o=0;o<n.parts.length;o++)n.parts[o](s.parts[o]);for(;o<s.parts.length;o++)n.parts.push(m(s.parts[o],e))}else{var a=[];for(o=0;o<s.parts.length;o++)a.push(m(s.parts[o],e));r[s.id]={id:s.id,refs:1,parts:a}}}}function d(t,e){for(var i=[],s={},n=0;n<t.length;n++){var r=t[n],o=e.base?r[0]+e.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};s[o]?s[o].parts.push(a):i.push(s[o]={id:o,parts:[a]})}return i}function p(t,e){var i=a(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var s=u[u.length-1];if("top"===t.insertAt)s?s.nextSibling?i.insertBefore(e,s.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),u.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var n=a(t.insertAt.before,i);i.insertBefore(e,n)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function w(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var s=function(){0;return i.nc}();s&&(t.attrs.nonce=s)}return b(e,t.attrs),p(t,e),e}function b(t,e){Object.keys(e).forEach(function(i){t.setAttribute(i,e[i])})}function m(t,e){var i,s,n,r;if(e.transform&&t.css){if(!(r="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=r}if(e.singleton){var o=l++;i=h||(h=w(e)),s=_.bind(null,i,o,!1),n=_.bind(null,i,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),p(t,e),e}(e),s=function(t,e,i){var s=i.css,n=i.sourceMap,r=void 0===e.convertToAbsoluteUrls&&n;(e.convertToAbsoluteUrls||r)&&(s=c(s));n&&(s+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var o=new Blob([s],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,i,e),n=function(){g(i),i.href&&URL.revokeObjectURL(i.href)}):(i=w(e),s=function(t,e){var i=e.css,s=e.media;s&&t.setAttribute("media",s);if(t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),n=function(){g(i)});return s(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;s(t=e)}else n()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=d(t,e);return f(i,e),function(t){for(var s=[],n=0;n<i.length;n++){var o=i[n];(a=r[o.id]).refs--,s.push(a)}t&&f(d(t,e),e);for(n=0;n<s.length;n++){var a;if(0===(a=s[n]).refs){for(var h=0;h<a.parts.length;h++)a.parts[h]();delete r[a.id]}}}};var v,y=(v=[],function(t,e){return v[t]=e,v.filter(Boolean).join("\n")});function _(t,e,i,s){var n=i?"":s.css;if(t.styleSheet)t.styleSheet.cssText=y(e,n);else{var r=document.createTextNode(n),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(r,o[e]):t.appendChild(r)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,s=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var n,r=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(n=0===r.indexOf("//")?r:0===r.indexOf("/")?i+r:s+r.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},function(t,e,i){"use strict";i.r(e);i(0);function s(t,e){return Math.floor(Math.random()*e-t)+t}function n(t){return Math.pow(t,2)}class r{constructor(t){this.idx=t,this.x=s(0,1e3),this.y=s(0,1e3),this.held_by="none",this.init()}draw(){this.DOMh.style.left=`${this.x/10}%`,this.DOMh.style.top=`${this.y/10}%`}remove(){this.DOMh.remove()}init(){this.DOMh=document.createElement("div"),this.DOMh.setAttribute("id",`g-${this.idx}`),this.DOMh.classList.add(...["gold"]),this.draw()}}class o{constructor(t,e,i,s,n){this.banner=t,this.style=e,this.insignia=i,this.idx=n,this.shield=s[0],this.weapon=s[1],this.engine=s[2],this.fraction=.05,this.speed=this.engine*this.fraction,this.status=0,this.shieldStatus=s[0],this.gold=0,this.init()}init(){let t=["ship",`s-${this.idx}`,`s-${this.banner}`,`s-${this.style}`];this.DOMh=document.createElement("div"),this.DOMh.classList.add(...t),this.DOMh.textContent=this.insignia,this.getInitialPosition(),this.draw()}move(t){this.x+=this.vx*this.fraction*this.speed*t,this.y+=this.vy*this.fraction*this.speed*t}draw(){this.DOMh.style.left=`${this.x/10}%`,this.DOMh.style.top=`${this.y/10}%`}getInitialPosition(){this.x=s(1,1e3),this.y=s(1,1e3)}resetVector(){let t=this.gt.x-this.x,e=this.gt.y-this.y,i=Math.abs(t),s=Math.abs(e),r=n(t)+n(e);this.vx=t*i/r,this.vy=e*s/r}acquireGold(){this.gold+=1}setGoldTarget(t){let e=2016400;t.forEach((t,i)=>{let s=t.x-this.x,r=t.y-this.y,o=n(s)+n(r);void 0===this.gt&&(this.gt=t,e=o),o<=e&&(this.gt=t,e=o)}),this.resetVector()}setEnemyTarget(t){let e=2e6,i=function(t){return Math.pow(t,2)};t.forEach(t=>{t.s_array.forEach(t=>{let s=this.x-t.x,n=(this.y,t.y,i(s)+i(s));void 0===this.et&&(this.et=t,e=n,this.et_d=e),n<=e&&(this.et=t,e=n,this.et_d=e)})})}attackEnemy(){let t=this.et_d/n(200);s(0,Math.floor(Math.random()*(1-t)*9))>=2&&this.et.getAttacked(this.weapon),this.incrementStunnedTimer()}getAttacked(t){this.shieldStatus-=t,this.shieldStatus<=0&&(this.speed=(this.engine+this.shieldStatus)*this.fraction),this.startStunnedTimer()}startStunnedTimer(){this.status=3}incrementStunnedTimer(){this.status>0&&this.status--,0===this.status&&(this.speed=this.engine*this.fraction,this.shieldStatus=this.shield)}}class a{constructor(t){this.banner=t,this.styles=["standard","swift","transport","gunner","speeder"],this.insignias={standard:"o",swift:"V",transport:"-",gunner:"*",speeder:"w"},this.baselines={sh:20,wp:10,eg:15},this.multipliers={sh:2,wp:2,eg:2},this.features={shields:[{power:this.baselines.sh+0*this.multipliers.sh,owned_by:["gunner"]},{power:this.baselines.sh+1*this.multipliers.sh,owned_by:["swift","speeder"]},{power:this.baselines.sh+2*this.multipliers.sh,owned_by:["standard"]},{power:this.baselines.sh+3*this.multipliers.sh,owned_by:[""]},{power:this.baselines.sh+4*this.multipliers.sh,owned_by:["transport"]}],weapons:[{power:this.baselines.wp+0*this.multipliers.wp,owned_by:["transport"]},{power:this.baselines.wp+1*this.multipliers.wp,owned_by:["speeder"]},{power:this.baselines.wp+2*this.multipliers.wp,owned_by:["standard","swift"]},{power:this.baselines.wp+3*this.multipliers.wp,owned_by:[]},{power:this.baselines.wp+4*this.multipliers.wp,owned_by:["gunner"]}],engines:[{power:this.baselines.eg+0*this.multipliers.eg,owned_by:[]},{power:this.baselines.eg+1*this.multipliers.eg,owned_by:[]},{power:this.baselines.eg+2*this.multipliers.eg,owned_by:["standard","transport","gunner"]},{power:this.baselines.eg+3*this.multipliers.eg,owned_by:["swift"]},{power:this.baselines.eg+4*this.multipliers.eg,owned_by:["speeder"]}]},this.profiles={standard:[this.features.shields[2].power,this.features.weapons[2].power,this.features.engines[2].power],swift:[this.features.shields[1].power,this.features.weapons[2].power,this.features.engines[3].power],transport:[this.features.shields[4].power,this.features.weapons[0].power,this.features.engines[2].power],gunner:[this.features.shields[0].power,this.features.weapons[4].power,this.features.engines[2].power],speeder:[this.features.shields[1].power,this.features.weapons[1].power,this.features.engines[4].power]}}buildShip(t,e,i){let s=this.profiles[e],n=this.insignias[e];return new o(t,e,n,s,i)}adjustMultipliers(){for(let t in this.multipliers)this.multipliers[t]+=1}getMultipliers(){for(let t in this.multipliers)console.log(this.multipliers[t])}}class h{constructor(t,e,i){this.banner=t,this.money=e,this.s_array=[],this.strategy=i,this.sf=new a(this.banner),this.init()}getNumShips(){return this.s_array.length}purchaseShips(){let t=this.strategy.standard,e=0;for(;t>e+1;)this.s_array.push(this.sf.buildShip(this.banner,"standard",e)),e++}init(){console.log("new Fleet",this.banner),this.purchaseShips()}}class l{constructor(){this.num_gold=900,this.money_per_fleet=15e4,this.DOMh=document.getElementById("board"),this.fleets=[new h("red",this.money_per_fleet,{standard:20,swift:0,transport:0,gunner:0,speeder:0}),new h("green",this.money_per_fleet,{standard:20,swift:0,transport:0,gunner:0,speeder:0}),new h("blue",this.money_per_fleet,{standard:20,swift:0,transport:0,gunner:0,speeder:0})],this.gold_pieces=[],this.init()}placeGold(){for(let t=0;t<this.num_gold;t++){let e=new r(t);this.gold_pieces.push(e)}}gold_on_field(){return this.gold_pieces.filter(t=>"none"===t.held_by)}init(){this.placeGold(),this.setTargets(this.fleets),this.fleets.forEach(t=>{t.s_array.forEach(t=>{this.DOMh.appendChild(t.DOMh)})}),this.gold_pieces.forEach(t=>{this.DOMh.appendChild(t.DOMh)})}setTargets(){this.fleets.forEach((t,e)=>{let i=this.fleets.filter((t,i)=>i!==e);t.s_array.forEach(t=>{t.setGoldTarget(this.gold_on_field()),t.setEnemyTarget(i)})})}makeAttacks(){this.fleets.forEach((t,e)=>{t.s_array.forEach(t=>{t.attackEnemy()})})}doHitDetect(){this.fleets.forEach(t=>{t.s_array.forEach(t=>{this.gold_pieces.forEach(e=>{n(e.x-t.x)+n(e.y-t.y)<25&&"none"===e.held_by&&this.removeGold(e,t)})})})}removeGold(t,e){t.held_by=e.profile,e.acquireGold(),this.setTargets(this.fleets),t.remove()}draw(){this.doHitDetect(),this.fleets.forEach(t=>{t.s_array.forEach(t=>{t.draw()})})}update(t){this.fleets.forEach(e=>{e.s_array.forEach(e=>{e.move(t)})})}oneSecUpdate(){this.makeAttacks()}twoSecUpdate(){this.setTargets()}clear(){for(;this.DOMh.firstChild;)this.DOMh.removeChild(this.DOMh.firstChild)}}let u=!0,c=20,f=[{banner:"red",gold:0},{banner:"green",gold:0},{banner:"blue",gold:0}];!function t(){u=!1;let e=new l,i=0,s=0,n=0,r=100,o=0,a=10,h=!1,d=!1;let p=0,g=0;function w(s){if(s<n+1e3/r)return void(i=requestAnimationFrame(w));o+=s-n,n=s;let l=0;for(;o>=a;)if(++g>74&&(e.oneSecUpdate(),g=0),++p>199&&(e.twoSecUpdate(),p=0),e.update(o),o-=a,++l>=124){o=0,console.log("panic");break}e.draw(),e.gold_on_field().length>0?i=requestAnimationFrame(w):(h=!1,d=!1,cancelAnimationFrame(i),e.fleets.forEach((t,e)=>{let i=t.s_array.reduce((t,e,i)=>t+e.gold,0);f[e].gold+=i,console.log(e+1,t.banner,i)}),e.clear(),document.querySelector("#r-score").textContent=f[0].gold,document.querySelector("#g-score").textContent=f[1].gold,document.querySelector("#b-score").textContent=f[2].gold,u=!0,--c>0&&t())}d||(d=!0,i=requestAnimationFrame(function(t){e.draw(),h=!0,n=t,s=t,i=requestAnimationFrame(w)}))}(),console.log("complete")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,